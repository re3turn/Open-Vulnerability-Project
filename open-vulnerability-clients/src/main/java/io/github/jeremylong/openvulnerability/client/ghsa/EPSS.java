/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023-2025 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.client.ghsa;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * The Exploit Prediction Scoring System.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonPropertyOrder({"percentage", "percentile"})
public class EPSS implements Serializable {

    private static final long serialVersionUID = 8877315807623182751L;

    @JsonProperty("percentage")
    private BigDecimal percentage;

    @JsonProperty("percentile")
    private BigDecimal percentile;

    public BigDecimal getPercentage() {
        return percentage;
    }

    public BigDecimal getPercentile() {
        return percentile;
    }

    @Override
    public String toString() {
        return "EPSS{" + "percentage=" + percentage + ", percentile=" + percentile + '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        EPSS epss = (EPSS) o;
        return Objects.equals(percentage, epss.percentage) && Objects.equals(percentile, epss.percentile);
    }

    @Override
    public int hashCode() {
        return Objects.hash(percentage, percentile);
    }
}
